\documentclass{article}

\usepackage{hyperref}

\begin{document}

<<Library, include = FALSE>>=
library(data.table)
library(knmiR)
library(tidyr)
library(ggplot2)
library(gamlss)
library(doParallel)
library(purrr)
library(DutchClimate)
registerDoParallel(3)
@

\subsection*{Idea}
After discussion with Theo, Gerard, and Adri it was decided, that the projection
for the annual mean should follow the updated Bosbijtel methode, i.e. we take
the daily temperatures observed so far for this year and add the daily
climatology of the last $k$ years.

To refine this later we can use the forecast values, instead of the climatology
for the following 14 days.

\subsection*{Steps}
\begin{enumerate}
 \item Obtain the data from (Robu-)KIS

<<LoadData, echo=FALSE, cache = TRUE>>=
load("../data/datasample.rda")

setnames(tmp, "REH1.TG", "tg")
tmp[, REH1.Q_TG := NULL]
tmp[, DS_CODE := NULL]

today <- "2017-05-09"
startOfYear <- "2017-01-01"

dailyData <- separate(tmp, IT_DATETIME, c("date", "hms", "nano"), sep = "_")
dailyData[, hms := NULL]
dailyData[, nano := NULL]
dailyData[, date := as.Date(date, format = "%Y%m%d")]

annualMeans <- dailyData[, .(TG = round(mean(tg), 2)), by = year(date)]
@

 \item Calculate climatology and daily rmse for different $k$
<<ClimatologyRMSE, echo=FALSE, cache = TRUE, dependson = 'LoadData'>>=
years   <- 5 : 30
rmseVec <- numeric(length(years))
for (k in seq_along(years)) {
  dailyClimatology <- foreach(i = (1956 : (2016-(years[k]-1))), .combine = "rbind") %dopar% {
    ComputeDailyClimatology(dailyData, i, i + (years[k]-1))
  }
  setkey(dailyClimatology, date)

  hindcastProjections <- foreach(i = 1986 : 2016, .combine = "rbind") %dopar% {
    Hindcast(i,
             dailyData[year(date)==i],
             dailyClimatology[year(date)==i])
  }
  setkey(hindcastProjections, date)

  tmp <- hindcastProjections[, .(bias = mean(res), sd = sd(res), rmse = sqrt(mean(res^2))), by = .(month(date), mday(date))]

  rmseVec[k] <- tmp[, mean(rmse)]
}
@

 \item Select most suitable $k$ (we do so on averaged rmse)

<<PlotRMSE, echo=FALSE, dependson='ClimatologyRMSE', fig.cap = "RMSE vs. $k$", fig.height=4, cache=TRUE>>=

plot(years, rmseVec, xlab = "k", ylab = "mean rmse")
@

  In our case this is $k=12$
 \item Produce hindcast with specified $k$ to assess uncertainty
 \item Make a base plot climate normals and scenarios

<<PlotProjection, echo=FALSE, cache=TRUE, fig.height = 4, fig.cap = "Base plot", dependson='LoadData'>>=

# print(annualMeans[year > 2000])

climateNormal <- data.frame(period = "1981/2010", year = 1981 : 2010,
                            value = annualMeans[year %in% seq.int(1981, 2010, by = 1), mean(TG)])
climateNormal <- rbind(climateNormal,
                       data.frame(period = "1961/1990", year = 1961 : 1990,
                            value = annualMeans[year %in% seq.int(1961, 1990, by = 1), mean(TG)]))

scenarios <- data.table(year = c(rep(2050, 4), rep(2080, 4)),
                        scenario = rep(c("GL", "GH", "WL", "WH"),2),
                        tg = c(11.2, 11.6, 12.2, 12.5, 11.5, 11.9, 13.5, 13.9))

p1 <- ggplot(annualMeans[year != year(today)], aes(x = year, y = TG)) + geom_line() +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050])

p1
@

 \item Add projection with 95\% uncertainty (level can be chosen)
<<hindcast, echo=FALSE, cache = TRUE, dependson = 'LoadData'>>=
k <- 12
dailyClimatology <- foreach(i = (1956 : (2016-(k-1))), .combine = "rbind") %dopar% {
  ComputeDailyClimatology(dailyData, i, i + (k-1))
}

setkey(dailyClimatology, date)

hindcastProjections <- foreach(i = 1986 : 2016, .combine = "rbind") %dopar% {
  Hindcast(i,
           dailyData[year(date)==i],
           dailyClimatology[year(date)==i])
}

setkey(hindcastProjections, date)

statistics <- hindcastProjections[, .(bias = mean(res), sd = sd(res), rmse = sqrt(mean(res^2))), by = .(month(date), mday(date))]
@

<<TGplot, fig.cap = "Base plot plus projection on 5. May 2017", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData','PlotProjection')>>=
climatology <- ComputeDailyClimatology(dailyData, 2016-11, 2016)
projection <- MeanProjection("2017-05-05", dailyData, NULL, climatology,
                             statistics, sdfactor = 1.96)
# print(projection)



p1 + #geom_point(aes(x = year(date), y = mean), col = 2,
    #            data = projection) +
  # geom_smooth(span=0.2) +
  geom_pointrange(aes(x = year(date), ymin = lower, y = mean, ymax = upper), col = 2,
                data = projection)
@


 \item Add trend

<<gamlssFit, message=FALSE, echo = FALSE, cache = TRUE, dependson=c('PlotProjection','TGplot')>>=

fit <- gamlss(TG ~ pb(year), data = annualMeans[year != 2017], family = "NO",
              control = gamlss.control(trace=FALSE))
probs <- seq.int(1, 99, by= 1) / 100
params <- list(mu = fit$mu.fv, sigma = fit$sigma.fv)

GetGamlssQuantile <- function(p, x, params) {
  data.table(family = "Normal",
             x      = x,
             p      = paste0("p", p),
             q      = do.call("qNO", c(p=p, params)))
}

values <- map(probs, GetGamlssQuantile, x = annualMeans[year!= 2017, year], params = params)

values <- rbindlist(values)

# values <- data.table(family = "NO",
#                      year   = rep(annualMeans[, year], 3),
#                      p      = rep(c("p0.1", "p0.5", "p0.9"), each = nrow(annualMeans)),
#                      q      = c(do.call("qNO", c(p=0.1, params)),
#                                 do.call("qNO", c(p=0.5,  params)),
#                                 do.call("qNO", c(p=0.9, params))))

values <- spread(values, p, q)

@

<<gamlssTrendPlot, echo=FALSE, fig.cap = "Trend uncertainty (gamlss)", fig.height = 4, cache=TRUE, dependson=c('PlotProjection','gamlssFit')>>=
gamlssPred <- predict(fit, se.fit = TRUE)
gamlssTrend <- annualMeans[year != 2017]
gamlssTrend[, pred := gamlssPred$fit]
gamlssTrend[, sd := gamlssPred$se.fit]

ggplot(annualMeans[year != year(today)], aes(x = year, y = TG)) + geom_line() +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050]) +
  geom_smooth(aes(x = year, y = pred, ymin = pred - 1.96 * sd, ymax = pred + 1.96 *sd), stat = "identity", data = gamlssTrend) +
  geom_pointrange(aes(x = year(date), ymin = lower, y = mean, ymax = upper), col = 2,
                data = projection)
@

<<gamlssObservationPlot, echo=FALSE, fig.cap = "Prediction interval (gamlss)", fig.height = 4, cache = TRUE, dependson = 'gamlssFit'>>=


# annualMeans[, fitted := fitted(fit)]

ggplot(annualMeans[year != year(today)], aes(x = year, y = TG)) + geom_line() +
  geom_ribbon(aes(x = x, y = p0.5, ymin = p0.01, ymax = p0.99), data = values, alpha = 0.2) +
  geom_ribbon(aes(x = x, y = p0.5, ymin = p0.25, ymax = p0.75), data = values, alpha = 0.2) +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050]) +
  geom_smooth(aes(x = x, y = p0.5, ymin = p0.1, ymax = p0.9), data = values, stat = "identity") +
  geom_pointrange(aes(x = year(date), ymin = lower, y = mean, ymax = upper), col = 2,
                data = projection)

@

 \item Envelope towards future climate?



\end{enumerate}

\newpage

<<JanuaryProjection, echo=FALSE, fig.height=4, fig.cap="Projection 1. January", cache=TRUE, dependson=c('LoadData','PlotProjection', 'gamlssFit', 'hindcast', 'TGplot')>>=
projection <- MeanProjection("2017-01-01", dailyData, NULL, climatology,
                             statistics, sdfactor = 1.96)
ggplot(annualMeans[year != year(today)], aes(x = year, y = TG)) + geom_line() +
  geom_ribbon(aes(x = x, y = p0.5, ymin = p0.01, ymax = p0.99), data = values, alpha = 0.2) +
  geom_ribbon(aes(x = x, y = p0.5, ymin = p0.25, ymax = p0.75), data = values, alpha = 0.2) +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050]) +
  geom_smooth(aes(x = x, y = p0.5, ymin = p0.1, ymax = p0.9), data = values, stat = "identity") +
  geom_pointrange(aes(x = year(date), ymin = lower, y = mean, ymax = upper), col = 2,
                data = projection)
@

\clearpage
Different trend models result in different pictures.

<<LoessTrend, fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData','PlotProjection')>>=
p1 +
  geom_smooth(span=0.2) +
  geom_pointrange(aes(x = year(date), ymin = lower, y = mean, ymax = upper), col = 2,
                data = projection)
@

<<LoessTrend2, fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData','PlotProjection')>>=
p1 +
  geom_smooth(span=0.75) +
  geom_pointrange(aes(x = year(date), ymin = lower, y = mean, ymax = upper), col = 2,
                data = projection)
@

<<PredictDates, echo=FALSE, cache=TRUE>>=
dates <- seq.Date(as.Date("1986-01-01"), as.Date("2016-12-31"), by = "day")
@

<<QuartelyGamProjection, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'PredictDates')>>=

PredictGamlss_savely <- safely(PredictGamlss)
gamtime <- system.time(result <- foreach(date = iter(dates)) %dopar% {
  PredictGamlss_savely(date, dailyData, forecast = NULL)
})

hasNoError <- map_lgl(result, function(x) is.null(x$error))

goodResults <- result[hasNoError]

predictionsGam <- rbindlist(map(goodResults, c(1)))
predictionsGam[, year := year(date)]
predictionsGam <- merge(predictionsGam, annualMeans[year != 2017,], by = "year", all.x=TRUE)
@

<<PlotQuartelyGam, fig.height=4, fig.cap="Gamlss predicition on January 1 (black) with uncertainty and true mean annual temperature (blue)", cache=TRUE, dependson=c('QuartelyGamProjection')>>=
ggplot(predictionsGam[yday(date) == 1], aes(x = date, ymin = p5, y = p50, ymax = p95)) +
  geom_ribbon(alpha = 0.2) + geom_line() +
  geom_line(aes(y = TG), col = 4, lty = 2)

@

<<QuartelyMVProjection, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'PredictDates')>>=

PredictMV_savely <- safely(PredictMovingWindow)
mvtime <- system.time(resultMV <- foreach(date = iter(dates)) %dopar% {
  PredictMV_savely(date, dailyData, forecast = NULL)
})

hasNoError <- map_lgl(resultMV, function(x) is.null(x$error))

goodResultsMV <- resultMV[hasNoError]

predictionsMV <- rbindlist(map(goodResultsMV, c(1)))
predictionsMV[, year := year(date)]
predictionsMV <- merge(predictionsMV, annualMeans[year != 2017,], by = "year", all.x=TRUE)



@

<<PlotMovingWindow, fig.height=4, fig.cap="12-year moving window prediction on January 1 (black) with uncertainty and true mean annual temperature (blue)", cache=TRUE, dependson=c('QuartelyMVProjection')>>=
ggplot(predictionsMV[yday(date) == 1], aes(x = date, ymin = p5, y = p50, ymax = p95)) +
  geom_ribbon(alpha = 0.2) + geom_line() +
  geom_line(aes(y = TG), col = 4, lty = 2)

@

<<>>=
gamtime
mvtime
@

<<>>=
predictions <- merge(predictionsGam[, .(date, predGam = p50)], predictionsMV[, .(date, predMV = p50, TG)], by = "date")
# predictionsGam[, sqrt(mean((p50-TG)^2, na.rm=TRUE))]
# predictionsMV[, sqrt(mean((p50-TG)^2, na.rm = TRUE))]
predictions
frmse <- function(x, y) sqrt(mean((x-y)^2, na.rm=TRUE))
fbias <- function(x, y) mean(x-y,na.rm=TRUE)
fsd   <- function(x, y) sd(x-y,na.rm=TRUE)
@

<<>>=
tmp <- predictions[, .(rmseGAM = frmse(predGam, TG), rmseMV = frmse(predMV, TG),
                       biasGAM = fbias(predGam, TG), biasMV = fbias(predMV, TG),
                       sdGAM = fsd(predGam, TG), sdMV = fsd(predMV, TG)),
                   by = .(month(date), mday(date))]
tmp[, date := as.Date(paste(2017, month, mday, sep = "-"), format="%Y-%m-%d")]
tmp <- na.omit(tmp)

ggplot(tmp, aes(x=date, y = rmseMV)) + geom_line() +
  geom_line(aes(y=rmseGAM), col = 2)

ggplot(tmp, aes(x=date, y = biasMV)) + geom_line() +
  geom_line(aes(y=biasGAM), col = 2)

ggplot(tmp, aes(x=date, y = sdMV)) + geom_line() +
  geom_line(aes(y=sdGAM), col = 2)
@


<<timing>>=
system.time(PredictGamlss("2017-05-01", dailyData))
system.time(PredictMovingWindow("2017-05-01", dailyData))
@

\section{Projection 2017}
<<AnnualMeans, echo = FALSE, cache = TRUE, dependson=c('LoadData')>>=
annualMeans <- dailyData[, .(TG = round(mean(tg), 2)), by = year(date)]
@

<<GamlssTrend, echo = FALSE, cache = TRUE, dependson = c('AnnualMeans')>>=

fit <- gamlss(TG ~ pb(year), data = annualMeans[year != 2017,], family = "NO",
              control = gamlss.control(trace=FALSE))

gamlssPred <- predict(fit, se.fit = TRUE)
gamlssTrend <- annualMeans[year != 2017]
gamlssTrend[, pred := gamlssPred$fit]
gamlssTrend[, sd := gamlssPred$se.fit]
@

<<ClimateNormals, echo = FALSE, cache = TRUE, dependson=c('LoadData')>>=
climateNormal <- data.table(period = "1981/2010", year = 1981 : 2010,
                            value = annualMeans[year %in% seq.int(1981, 2010, by = 1), mean(TG)])
climateNormal <- rbind(climateNormal,
                       data.table(period = "1961/1990", year = 1961 : 1990,
                            value = annualMeans[year %in% seq.int(1961, 1990, by = 1), mean(TG)]))

@

<<Scenarios, echo = FALSE, cache = TRUE>>=
scenarios <- data.table(year = c(rep(2050, 4), rep(2080, 4)),
                        scenario = rep(c("GL", "GH", "WL", "WH"),2),
                        tg = c(11.2, 11.6, 12.2, 12.5, 11.5, 11.9, 13.5, 13.9))
@

<<Projection, echo = FALSE, cache = TRUE, dependson=c('LoadData')>>=
projection <- PredictMovingWindow("2017-05-05", dailyData)
projection
@


<<ScenarioEnvelopes, echo = TRUE, cache = TRUE, dependson = c('ClimateNormals', 'Scenarios')>>=
var   <- 0.16
start <- climateNormal[period == "1981/2010" & year == 1995,
                       .(year, lower = value - var, upper = value + var)]
end   <- scenarios[year == 2050,
                   .(lower = min(tg) - var, upper = max(tg) + var), by = year]


envelope <- MakeTrendEnvelope(start, end)
@

<<TGbaseplot, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend', 'ClimateNormals', 'Scenarios', 'Projection', 'ScenarioEnvelopes')>>=
tgplot <- ggplot(annualMeans[year != year(today)], aes(x = year, y = TG)) +
  geom_line() +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050]) +
  geom_smooth(aes(x = year, y = pred, ymin = pred - 1.96 * sd, ymax = pred + 1.96 *sd), stat = "identity", data = gamlssTrend) +
  # geom_smooth(span=0.75, col = 2) +
  geom_pointrange(aes(x = year(date), ymin = p5, y = p50, ymax = p95), col = 2,
                data = projection)
@

<<TGplot2, fig.cap = "Base plot plus projection on 5. May 2017", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend', 'ClimateNormals', 'Scenarios', 'Projection', 'ScenarioEnvelopes', 'TGbaseplot')>>=

tgplot +
  geom_line(aes(x = year, y = upper), lty = 3, col = 4, data = envelope) +
  geom_line(aes(x = year, y = lower), lty = 3, col = 4, data = envelope)
@

<<TGplot3, fig.cap = "Base plot plus projection on 5. May 2017", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend', 'ClimateNormals', 'Scenarios', 'Projection', 'ScenarioEnvelopes', 'TGbaseplot')>>=

tgplot +
  geom_ribbon(aes(x = year, ymin = lower, ymax = upper, y = NULL), alpha = 0.2, data = envelope)
@

<<ScenarioEnvelopes2, echo = TRUE, cache = TRUE, dependson = c('GamlssTrend', 'Scenarios')>>=
var   <- 0.16
start <- gamlssTrend[year == 2017 - 1,
                     .(year, lower = pred - 1.96 * sd, upper = pred + 1.96 * sd)]
start
end   <- scenarios[year == 2050,
                   .(lower = min(tg) - var, upper = max(tg) + var), by = year]


envelope <- MakeTrendEnvelope(start, end)
@

<<TGplot4, fig.cap = "Base plot plus projection on 5. May 2017", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend', 'ClimateNormals', 'Scenarios', 'Projection', 'ScenarioEnvelopes2', 'TGbaseplot')>>=

tgplot +
  geom_line(aes(x = year, y = upper), lty = 3, col = 4, data = envelope) +
  geom_line(aes(x = year, y = lower), lty = 3, col = 4, data = envelope)
@

<<TGplot5, fig.cap = "Base plot plus projection on 5. May 2017", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend', 'ClimateNormals', 'Scenarios', 'Projection', 'ScenarioEnvelopes2', 'TGbaseplot')>>=

tgplot +
  geom_ribbon(aes(x = year, ymin = lower, ymax = upper, y = NULL), alpha = 0.2, data = envelope)
@

\clearpage

<<GamlssTrend2016, echo = FALSE, cache = TRUE, dependson = c('AnnualMeans')>>=

fit <- gamlss(TG ~ pb(year), data = annualMeans[year != 2017 & year != 2016,], family = "NO",
              control = gamlss.control(trace=FALSE))

gamlssPred <- predict(fit, se.fit = TRUE)
gamlssTrend <- annualMeans[year != 2017 & year != 2016]
gamlssTrend[, pred := gamlssPred$fit]
gamlssTrend[, sd := gamlssPred$se.fit]
@


<<Projection2016, echo = FALSE, cache = TRUE, dependson=c('LoadData')>>=
projection <- PredictMovingWindow("2016-12-05", dailyData)
@

<<ScenarioEnvelopes2016, echo = FALSE, cache = TRUE, dependson = c('GamlssTrend2016', 'Scenarios')>>=
var   <- 0.16
start <- gamlssTrend[year == 2016 - 1,
                     .(year, lower = pred - 1.96 * sd, upper = pred + 1.96 * sd)]
end   <- scenarios[year == 2050,
                   .(lower = min(tg) - var, upper = max(tg) + var), by = year]


envelope <- MakeTrendEnvelope(start, end)
@

<<TGbaseplot2016, warning = TRUE, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend2016', 'ClimateNormals', 'Scenarios', 'Projection2016', 'ScenarioEnvelopes2016')>>=
tgplot <- ggplot(annualMeans[year != 2017 & year != 2016], aes(x = year, y = TG)) +
  geom_line() +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050]) +
  geom_smooth(aes(x = year, y = pred, ymin = pred - 1.96 * sd, ymax = pred + 1.96 *sd), stat = "identity", data = gamlssTrend) +
  # geom_smooth(span=0.75, col = 2) +
  geom_pointrange(aes(x = year(date), ymin = p5, y = p50, ymax = p95), col = 2,
                data = projection)
@

<<TGplot2016, warning = TRUE, fig.cap = "Base plot plus projection on 5. December 2016", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend2016', 'ClimateNormals', 'Scenarios', 'Projection2016', 'ScenarioEnvelopes2017', 'TGbaseplot2016')>>=

tgplot +
  geom_line(aes(x = year, y = upper), lty = 3, col = 4, data = envelope) +
  geom_line(aes(x = year, y = lower), lty = 3, col = 4, data = envelope)
@

<<GamlssTrend2017, echo = FALSE, cache = TRUE, dependson = c('AnnualMeans')>>=

fit <- gamlss(TG ~ pb(year), data = annualMeans[year != 2017,], family = "NO",
              control = gamlss.control(trace=FALSE))

gamlssPred <- predict(fit, se.fit = TRUE)
gamlssTrend <- annualMeans[year != 2017]
gamlssTrend[, pred := gamlssPred$fit]
gamlssTrend[, sd := gamlssPred$se.fit]
@

<<ScenarioEnvelopes2017, echo = FALSE, cache = TRUE, dependson = c('GamlssTrend2017', 'Scenarios')>>=
var   <- 0.16
start <- gamlssTrend[year == 2017 - 1,
                     .(year, lower = pred - 1.96 * sd, upper = pred + 1.96 * sd)]
end   <- scenarios[year == 2050,
                   .(lower = min(tg) - var, upper = max(tg) + var), by = year]


envelope <- MakeTrendEnvelope(start, end)
@

<<Projection2017, echo = FALSE, cache = TRUE, dependson=c('LoadData')>>=
projection <- PredictMovingWindow("2017-01-05", dailyData)
@

<<TGbaseplot2017, warning = TRUE, echo = FALSE, cache = FALSE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend2017', 'ClimateNormals', 'Scenarios', 'Projection2017', 'ScenarioEnvelopes2017')>>=
tgplot <- ggplot(annualMeans[year != 2017], aes(x = year, y = TG)) +
  geom_line() +
  geom_line(aes(x = year, y = value, col = period), data = climateNormal) +
  geom_point(aes(x = year, y = tg, shape = scenario), data = scenarios[year == 2050]) +
  geom_smooth(aes(x = year, y = pred, ymin = pred - 1.96 * sd, ymax = pred + 1.96 *sd), stat = "identity", data = gamlssTrend) +
  geom_pointrange(aes(x = year(date), ymin = p5, y = p50, ymax = p95), col = 2,
                data = projection)
@

<<TGplot2017, warning = TRUE, fig.cap = "Base plot plus projection on 5. January 2017 (lines)", fig.height=4, echo = FALSE, cache = TRUE, dependson=c('LoadData', 'AnnualMeans', 'GamlssTrend2017', 'ClimateNormals', 'Scenarios', 'Projection2017', 'ScenarioEnvelopes2017', 'TGbaseplot2017')>>=

tgplot +
  geom_line(aes(x = year, y = upper), lty = 3, col = 4, data = envelope) +
  geom_line(aes(x = year, y = lower), lty = 3, col = 4, data = envelope)
@

Natural variation (90\% confidence band) of 30-year means is around 0.16 degree
Celsius, see also \url{http://www.klimaatscenarios.nl/kerncijfers/}.



%
% <<>>=
% dailyData[, year := year(date)]
% dailyData[, month := month(date)]
% dailyData[, day := mday(date)]
%
% head(dailyData)
%
% MeanProjection2 <- function(dt, Date, probs = c(0.05, 0.50, 0.95)) {
%   message("Call is fine")
%   tmp <- dt[date < Date & (month > month(Date) | (month == month(Date) & day > mday(Date))),
%             .(TG = mean(tg)), by = year]
%
%   message("Averaging worked")
%   fit <- gamlss(TG ~ pb(year), data = tmp, family = "NO")
%
%
%   message("Fit passed")
%   newValues <- data.frame(year = 2017)
%   message("Data frame is defined")
%   mu <- predict(fit, newdata = newValues, what = "mu", se.fit = FALSE)
%   message("Mu was predicted")
%   sd <- exp(predict(fit, newdata = newValues, what = "sigma"))
%   message("Sd was predicted")
%   params <- list(mu = mu, sigma = sd)
%   # params <-  gamlss::predictAll(fit, newValues)
%
%   message("Parameters were predicted")
%
%   ndays <- yday("2017-12-31")
%   mdays <- yday(Date)
%   lambda <- mdays / ndays
%
%   message("Date proportion is calculated")
%   prediction <- qnorm(probs, params$mu, params$sigma)
%   current    <- dt[year == 2017, mean(tg)]
%
%   lambda * current + (1 - lambda) * prediction
%
% }
%
%
% MeanProjection2(dailyData, "2017-05-10", c(0.01, 0.5, 0.99))
%
%
% @

\end{document}
